/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.cloudera.flume.handlers.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftEventAck implements org.apache.thrift.TBase<ThriftEventAck, ThriftEventAck._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftEventAck");

  private static final org.apache.thrift.protocol.TField ACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ackID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("hostList", org.apache.thrift.protocol.TType.LIST, (short)2);

  public String ackID; // required
  public List<String> hostList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACK_ID((short)1, "ackID"),
    HOST_LIST((short)2, "hostList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACK_ID
          return ACK_ID;
        case 2: // HOST_LIST
          return HOST_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACK_ID, new org.apache.thrift.meta_data.FieldMetaData("ackID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_LIST, new org.apache.thrift.meta_data.FieldMetaData("hostList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftEventAck.class, metaDataMap);
  }

  public ThriftEventAck() {
  }

  public ThriftEventAck(
    String ackID,
    List<String> hostList)
  {
    this();
    this.ackID = ackID;
    this.hostList = hostList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftEventAck(ThriftEventAck other) {
    if (other.isSetAckID()) {
      this.ackID = other.ackID;
    }
    if (other.isSetHostList()) {
      List<String> __this__hostList = new ArrayList<String>();
      for (String other_element : other.hostList) {
        __this__hostList.add(other_element);
      }
      this.hostList = __this__hostList;
    }
  }

  public ThriftEventAck deepCopy() {
    return new ThriftEventAck(this);
  }

  @Override
  public void clear() {
    this.ackID = null;
    this.hostList = null;
  }

  public String getAckID() {
    return this.ackID;
  }

  public ThriftEventAck setAckID(String ackID) {
    this.ackID = ackID;
    return this;
  }

  public void unsetAckID() {
    this.ackID = null;
  }

  /** Returns true if field ackID is set (has been assigned a value) and false otherwise */
  public boolean isSetAckID() {
    return this.ackID != null;
  }

  public void setAckIDIsSet(boolean value) {
    if (!value) {
      this.ackID = null;
    }
  }

  public int getHostListSize() {
    return (this.hostList == null) ? 0 : this.hostList.size();
  }

  public java.util.Iterator<String> getHostListIterator() {
    return (this.hostList == null) ? null : this.hostList.iterator();
  }

  public void addToHostList(String elem) {
    if (this.hostList == null) {
      this.hostList = new ArrayList<String>();
    }
    this.hostList.add(elem);
  }

  public List<String> getHostList() {
    return this.hostList;
  }

  public ThriftEventAck setHostList(List<String> hostList) {
    this.hostList = hostList;
    return this;
  }

  public void unsetHostList() {
    this.hostList = null;
  }

  /** Returns true if field hostList is set (has been assigned a value) and false otherwise */
  public boolean isSetHostList() {
    return this.hostList != null;
  }

  public void setHostListIsSet(boolean value) {
    if (!value) {
      this.hostList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACK_ID:
      if (value == null) {
        unsetAckID();
      } else {
        setAckID((String)value);
      }
      break;

    case HOST_LIST:
      if (value == null) {
        unsetHostList();
      } else {
        setHostList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACK_ID:
      return getAckID();

    case HOST_LIST:
      return getHostList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACK_ID:
      return isSetAckID();
    case HOST_LIST:
      return isSetHostList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftEventAck)
      return this.equals((ThriftEventAck)that);
    return false;
  }

  public boolean equals(ThriftEventAck that) {
    if (that == null)
      return false;

    boolean this_present_ackID = true && this.isSetAckID();
    boolean that_present_ackID = true && that.isSetAckID();
    if (this_present_ackID || that_present_ackID) {
      if (!(this_present_ackID && that_present_ackID))
        return false;
      if (!this.ackID.equals(that.ackID))
        return false;
    }

    boolean this_present_hostList = true && this.isSetHostList();
    boolean that_present_hostList = true && that.isSetHostList();
    if (this_present_hostList || that_present_hostList) {
      if (!(this_present_hostList && that_present_hostList))
        return false;
      if (!this.hostList.equals(that.hostList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftEventAck other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftEventAck typedOther = (ThriftEventAck)other;

    lastComparison = Boolean.valueOf(isSetAckID()).compareTo(typedOther.isSetAckID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackID, typedOther.ackID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostList()).compareTo(typedOther.isSetHostList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostList, typedOther.hostList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ACK_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.ackID = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HOST_LIST
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
              this.hostList = new ArrayList<String>(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                String _elem11; // required
                _elem11 = iprot.readString();
                this.hostList.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.ackID != null) {
      oprot.writeFieldBegin(ACK_ID_FIELD_DESC);
      oprot.writeString(this.ackID);
      oprot.writeFieldEnd();
    }
    if (this.hostList != null) {
      oprot.writeFieldBegin(HOST_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.hostList.size()));
        for (String _iter12 : this.hostList)
        {
          oprot.writeString(_iter12);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftEventAck(");
    boolean first = true;

    sb.append("ackID:");
    if (this.ackID == null) {
      sb.append("null");
    } else {
      sb.append(this.ackID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostList:");
    if (this.hostList == null) {
      sb.append("null");
    } else {
      sb.append(this.hostList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

